# This defines the core steps for building and validating iTwin.js Core

parameters:
  - name: workingDir
    type: string
    default: $(System.DefaultWorkingDirectory)

steps:
  - script: pnpm syncpack list-mismatches 1>&2
    displayName: syncpack
    workingDirectory: ${{ parameters.workingDir }}
    failOnStderr: true
  - task: PythonScript@0
    displayName: "beachball check"
    inputs:
      workingDirectory: ${{ parameters.workingDir }}
      scriptSource: filepath
      scriptPath: common/scripts/run_beachball_check.py
      arguments: $(Build.SourceBranch) $(Build.Reason) $(System.PullRequest.TargetBranch)
      failOnStderr: true
  - script: pnpm install --frozen-lock-file
    displayName: pnpm install
    workingDirectory: ${{ parameters.workingDir }}
  - script: pnpm audit
    displayName: pnpm audit
    workingDirectory: ${{ parameters.workingDir }}
    condition: and(succeeded(), ne(variables['Agent.OS'], 'Darwin'))
  - script: pnpm build:ci
    displayName: pnpm build:ci
    workingDirectory: ${{ parameters.workingDir }}
    condition: and(succeeded(), not(and(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Agent.OS'], 'Darwin'))))
  - script: pnpm build
    displayName: pnpm build
    workingDirectory: ${{ parameters.workingDir }}
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Agent.OS'], 'Darwin'))
  - script: pnpm build:ios --filter display-test-app
    workingDirectory: ${{ parameters.workingDir }}
    displayName: "Build iOS display-test-app"
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Agent.OS'], 'Darwin'))
  - script: pnpm lint
    displayName: pnpm lint
    workingDirectory: ${{ parameters.workingDir }}

  - script: pnpm webpack:test
    displayName: "pnpm webpack:test (for pnpm cover)"

  # By default linux agents do not have a real display so use the virtual framebuffer
  - script: xvfb-run --auto-servernum --server-args='-screen 0, 1600x900x24' pnpm cover
    displayName: pnpm cover
    workingDirectory: ${{ parameters.workingDir }}
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

  # MacOS and Windows agents work without any virtual display
  - script: pnpm cover
    displayName: pnpm cover
    workingDirectory: ${{ parameters.workingDir }}
    condition: and(succeeded(), ne(variables['Agent.OS'], 'Linux'))

  - script: pnpm docs
    displayName: pnpm docs
    workingDirectory: ${{ parameters.workingDir }}
