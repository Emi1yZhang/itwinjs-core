parameters:
  - name: NodeVersion # name of the parameter; required
    type: string # data type of the parameter; required
  - name: workingDir
    type: string
    default: $(System.DefaultWorkingDirectory)

steps:
  #-------
  # JUnit Tests - combined in one publishing step to save CI time
  #-------
  - task: PublishTestResults@2
    displayName: "Publish JUnit Test Results"
    inputs:
      testResultsFiles: |
        core/backend/lib/test/junit_results.xml
        core/bentley/lib/test/junit_results.xml
        core/common/lib/test/junit_results.xml
        core/ecschema-locaters/lib/test/junit_results.xml
        core/ecschema-metadata/lib/test/junit_results.xml
        core/frontend/lib/test/junit_results.xml
        core/geometry/lib/test/junit_results.xml
        core/i18n/lib/test/junit_results.xml
        core/quantity/lib/test/junit_results.xml
        presentation/backend/lib/test/junit_results.xml
        presentation/common/lib/test/junit_results.xml
        presentation/components/lib/test/junit_results.xml
        presentation/frontend/lib/test/junit_results.xml
        presentation/testing/lib/test/junit_results.xml
        ui/abstract/lib/test/junit_results.xml
        ui/components/lib/test/junit_results.xml
        ui/core/lib/test/junit_results.xml
        ui/framework/lib/test/junit_results.xml
        ui/ninezone/lib/test/junit_results.xml
        full-stack-tests/core/lib/test/junit_results.xml
        full-stack-tests/presentation/lib/test/junit_results.xml
        full-stack-tests/rpc/lib/test/junit_results.xml
        example-code/app/lib/test/junit_results.xml
        example-code/snippets/lib/test/junit_results.xml
      testRunTitle: "JUnit tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  ## TODO: Fix combining code coverage into a single xml file to publish
  - task: PythonScript@0
    displayName: "Combine code coverage"
    inputs:
      workingDirectory: ${{ parameters.workingDir }}
      pythonInterpreter: python3
      scriptSource: inline
      script: |
        import os, argparse, shutil, glob

        parser = argparse.ArgumentParser()
        parser.add_argument(
          "--output", help="Output path where xml reports will be copied")
        args = parser.parse_args()
        workDir = os.getcwd()

        listOfPaths = []

        for path in glob.iglob((workDir + "/*/*/.nyc_output"), recursive=True):
          listOfPaths.append(path)

        for path in glob.iglob((workDir + "/*/*/lib/**/.nyc_output"), recursive=True):
          listOfPaths.append(path)

        for path in glob.iglob((workDir + "/*/*/*/lib/**/.nyc_output"), recursive=True):
          listOfPaths.append(path)

        outputDir = os.path.join(args.output, "coverageXMLs")
        processInfoDir = os.path.join(args.output, "coverageXMLs/processinfo")
        if not os.path.exists(processInfoDir):
          os.makedirs(processInfoDir)

        for path in listOfPaths:
          for file in glob.iglob((path + "/**"), recursive=True):
            if os.path.isfile(file):
              if "processinfo" in file:
                shutil.copy(file, processInfoDir)
              else:
                shutil.copy(file, outputDir)

      arguments: --output $(Build.ArtifactStagingDirectory)
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Darwin'))
  - task: Cmdline@2
    displayName: "Generate combined coverage report"
    inputs:
      script: npx nyc report --temp-dir="$(Build.ArtifactStagingDirectory)/coverageXMLs/" --report-dir="$(Build.ArtifactStagingDirectory)/coverageResults" --all --reporter=lcov --reporter=cobertura
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Darwin'))
  - task: PublishCodeCoverageResults@1
    displayName: "Publish code coverage"
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: "$(Build.ArtifactStagingDirectory)/coverageResults/cobertura-coverage.xml"
      reportDirectory: "$(Build.ArtifactStagingDirectory)/coverageResults/lcov-report"
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Darwin'))