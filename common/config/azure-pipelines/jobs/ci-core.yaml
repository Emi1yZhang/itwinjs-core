parameters:
  name: ''
  pool: ''
  nodeVersion: ''

jobs:
- job:
  strategy:
    matrix:
      # "Windows_${{ parameters.name }}":
      #   OS: windows-latest
      #   platform: Windows_NT
      #   name: $(win_pool)
      # "Linux_${{ parameters.name }}":
      #   OS: ubuntu-latest
      #   platform: Linux
      #   name: $(linux_pool)
      "MacOS_${{ parameters.name }}":
        OS: macOS-latest
        platform: Darwin
        name: iModelTechMacArm

  timeoutInMinutes: 120

  pool: ${{ parameters.pool }}

  workspace:
    clean: all

  steps:
    - checkout: self
      clean: true
      fetchDepth: 1

    - bash: /usr/bin/arch
      displayName: get current arch
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))

    - bash: uname -m
      displayName: get current arch using uname
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))

    - bash: printenv
      displayName: printenv
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))

    - bash: node -p process.arch
      displayName: get current arch using node
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))

    # - bash: |
    #     arch -arm64 /bin/zsh
    #   displayName: force arm arch
    #   condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))

    # - bash: uname -m
    #   displayName: get current arch
    #   condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))

    - task: UseNode@1
      displayName: "Use Node ${{ parameters.nodeVersion }}"
      inputs:
        version: 16.17.0
        checkLatest: true
      condition: and(succeeded(), ne(variables['Agent.OS'], 'Darwin'))

    # Write the installed version to the command line
    - script: which node

    - script: |
        git config --local user.email imodeljs-admin@users.noreply.github.com
        git config --local user.name imodeljs-admin
      displayName: git config

    - powershell: |
        # Get the new version number.
        $json = Get-Content -Raw -Path common/config/rush/version-policies.json | ConvertFrom-Json
        $currVersion = $json[0].version

        $newBuildNumber = $currVersion + "_$(Build.BuildNumber)"

        Write-Host "##vso[build.updatebuildnumber]$newBuildNumber"
      displayName: Set build number
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

    - template: ../templates/core-build.yaml

    # Will run if even there is a failure somewhere else in the pipeline.
    - template: ../templates/publish-test-results.yaml
      parameters:
        NodeVersion: ${{ parameters.nodeVersion }}
    # The publish script identifies any new packages not previously published and tags the build
    - template: ../templates/publish.yaml
